
"this is the 4-print_square module"
======================

The 'print_square' module is a unit test that verifies the
printing of '#' in a row to create a square.

Example 1: usage:
    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(4)
    ####
    ####
    ####
    ####

Example 2 : It also works with larger squares, such as a 10x10 square:

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

Example 3 : It also works When the size is set to 0, it doesn't print anything:

    >>> print_square(0)

Example 4 : It also works with a 1x1 square:

    >>> print_square(1)
    #

TypeError when adding None
Example 5 : However, there are certain error cases that are handled by the module:

    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be an integer

ValueError when adding negative number to size
Example 6 : raised when a negative number is passed as the size parameter:

    >>> print_square(-10)
    Traceback (most recent call last):
    ValueError: size must be >= 0

ValueError when adding a negative float

    >>> print_square(-10.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

TypeError when adding a string in the size parameter
Example 7 : raised when a negative float is passed as the size parameter:

    >>> print_square("hello")
    Traceback (most recent call last):
    TypeError: size must be an integer

TyeError when non value is added to the parameter
Example 8 : is raised when a string is passed as the size parameter:

    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required positional argument: 'size'
